.in-prplmesh-builder:
  image:
    name: prplfoundationinc/prplmesh-builder:ubuntu-18.04
    entrypoint: [""]
  tags:
    - docker

cppcheck:
  stage: build
  image: prplfoundationinc/prplmesh-builder:alpine-3.11.3
  script:
    # cppcheck runs in the alpine image because every new release brings useful improvements
    # (the versions from Ubuntu get old too quickly)
    - tools/docker/static-analysis/cppcheck.sh common
  artifacts:
    paths:
      - cppcheck_results.txt
    when: always
  tags:
    - docker

clang-format:
  extends: .in-prplmesh-builder
  stage: build
  script:
    # Run clang-format and check there are no modified files
    - ./clang-format.sh
    # `diff-index` doesn't update the index so doesn't actually see changes. Need to manually update index.
    - git update-index -q --refresh
    # Use `diff-index` instead of `status` or `diff` because it gives more predictable output and exit code.
    - |
      git diff-index --exit-code HEAD || {
        ret=$?
        echo "Inconsistent formatting, please apply patch from artifacts"
        git diff > correct-formatting.patch
        exit $ret
      }
  artifacts:
    paths:
      - correct-formatting.patch
    when: on_failure

build-in-docker:
  extends: .in-prplmesh-builder
  stage: build
  variables:
    CMAKE_BUILD_TYPE: "Release"
    EXTRA_CMAKE_FLAGS: ""
  script:
    - cmake -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_INSTALL_PREFIX=build/install \
        $EXTRA_CMAKE_FLAGS -H. -Bbuild -G Ninja
    - ninja -C build install
    # Check that the AutoGenerated files are correct by checking git status
    - git update-index -q --refresh
    - git diff-index --exit-code HEAD
  artifacts:
    paths:
      - build/install

.run-test-in-docker:
  stage: test
  extends: .in-prplmesh-builder
  script:
    - cd build/install
    - ./bin/tests/${CI_JOB_NAME}
  needs:
    - job: build-in-docker

tlvf_test:
  extends: .run-test-in-docker

run-tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/tests-runner:18.09.7-dind
  script:
    # Try to pull from dockerhub, if it fails, the run should fail
    - tools/docker/image-pull.sh
    - tests/test_flows.sh -v -u $RANDOM client_steering_dummy

  artifacts:
    paths:
      - logs
    when: always

  tags:
    - docker
    - docker-build

  after_script:
    - tools/docker/stop.sh -k -r
  needs:
    - job: build-in-docker

run-tests-2:
  extends: run-tests
run-tests-3:
  extends: run-tests
run-tests-4:
  extends: run-tests
run-tests-5:
  extends: run-tests
run-tests-6:
  extends: run-tests
run-tests-7:
  extends: run-tests
run-tests-8:
  extends: run-tests
run-tests-9:
  extends: run-tests
run-tests-10:
  extends: run-tests
